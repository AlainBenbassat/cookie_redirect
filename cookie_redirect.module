<?php

/**
 * hook login
 */
function cookie_redirect_user_login(&$edit, $account) {
  if (array_key_exists('form_id', $_POST) && $_POST['form_id'] != 'user_pass_reset') {
    // check if a redirect is needed
    cookie_redirect_do_redirect();
  }
}

/**
 * hook logout
 */
function cookie_redirect_user_logout($account) {
  // get the name of the cookie we have to unset
  $cookietoset = variable_get('cookietoset', 'cookieRedirect');

  // delete the cookie by setting a time in the past
  setcookie($cookietoset, '', time() - 3600, "/", cookie_redirect_getDomain());
}

/**
 * hook page alter
 */
function cookie_redirect_page_alter(&$page) {
  global $user;

  if (current_path() == 'user/' . $user->id) {
    // check if a redirect is needed
    cookie_redirect_do_redirect();
  }
}

/**
 * the redirect function redirects to the external website that is specified by &rd=EXTERNALWEBSITE
 */
function cookie_redirect_do_redirect() {
  global $user;
  
  // check if the user is logged in 
  if ($user->uid) {
    // check if the query parameter "rd" is set
    $queryParameters = drupal_get_query_parameters();
    if (array_key_exists('rd', $queryParameters)) {
      // make sure it's a correct external url
      if (url_is_external($queryParameters['rd'])) {
        // check if the user is part of the allowed CiviCRM group
        if (cookie_redirect_checkCiviCRMGroup($user->uid) == TRUE) {
          // get the name of the cookie we have to set
          $cookietoset = variable_get('cookietoset', 'cookieRedirect');

          // set and redirect
          setcookie($cookietoset, 1, time() + 86400, '/', cookie_redirect_getDomain());
          drupal_goto($queryParameters['rd'], array('external' => TRUE));
        }
        else {
          // not all conditions are met, remove cookie
          setcookie($cookietoset, '', time() - 3600, "/", cookie_redirect_getDomain());

          // show error message
          drupal_set_message('U hebt geen toestemming om het volledige artikel te bekijken', 'error');
        }
      }
      else {
        watchdog('error', 'Cookie redirect module cannot redirect to: ' . $queryParameters['rd']);
      }
    }
  }
}

/**
 * admin settings menu
 */
function cookie_redirect_menu() {
  $items['admin/config/system/cookieredirect'] = array(
    'title' => 'Cookie Redirect configure',
    'description' => 'Specify the CookieRedirect settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cookie_redirect_admin_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cookie_redirect.admin.inc',
  );
 
  return $items;
}

/**
 * returns the domain with maximum 2 levels.
 * e.g. www.myserver.com will return .myserver.com
 *
 * This enables us to set a cookie on a domain level rather than website level.
 */
function cookie_redirect_getDomain() {
  global $cookie_domain;

  $parts = explode('.', $cookie_domain);

  if (count($parts) > 2) {
    $domain = '.' . $parts[count($parts) - 2] . '.' . $parts[count($parts) - 1];
  }
  else {
    $domain = $cookie_domain;
  }

  return $domain;
}

/**
 * Checks if the current user is part of the CiviCRM group that is allowed for single sign-on.
 * The name of the group should be set in the settings of the module.
 *
 * @return bool
 *
 */
function cookie_redirect_checkCiviCRMGroup($userID) {
  // see if the CiviCRM group is filled in. If not, no check is done.
  $civiCRMGroup = variable_get('civicrmgrouptocheck', '');
  if ($civiCRMGroup) {
    civicrm_initialize();

    // get the contact id of the user
    $params = array(
      'uf_id' => $userID,
      'sequential' => 1,
    );
    $results = civicrm_api3('UFMatch', 'get', $params);
    if ($results['count'] == 0) {
      // user doesn't have an account, deny access
      return FALSE;
    }
    $contactID = $results['values']['0']['contact_id'];

    // get the ID of the group
    $params = array(
      'title' => $civiCRMGroup,
      'is_active' => 1,
      'sequential' => 1,
    );
    $results = civicrm_api3('Group', 'get', $params);
    if ($results['count'] == 0) {
      // the group does not exist or is not active, deny access
      return FALSE;
    }
    $groupID = $results['values']['0']['id'];

    // check if the contact is part of the group
    $params = array(
      'contact_id' => $contactID,
      'group_id' => $groupID,
      'status' => 'Added',
      'sequential' => 1,
    );
    $results = civicrm_api3('GroupContact', 'get', $params);
    if ($results['count'] == 0) {
      // the contact is not part of the group, deny access
      return FALSE;
    }
  }

  return TRUE;
}
